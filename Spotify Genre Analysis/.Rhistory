data("sp500w")
sp500w_timeseries <- ts(sp500w, frequency = 52, start=c(2008-01-01), end=c(2009-01-01))
sp500w_timeseries
is.ts(sp500w_timeseries)
plot(sp500w_timeseries, main = "Weekly Growth Rate of the S & P 500 from 2008 to 2020",
xlab = "Year", ylab = "Weekly Growth Rate")
data("sp500w")
sp500w_timeseries <- ts(sp500w, frequency = 52, start=c(2008, 1), end=c(2009, 1))
sp500w_timeseries
is.ts(sp500w_timeseries)
plot(sp500w_timeseries, main = "Weekly Growth Rate of the S & P 500 from 2008 to 2020",
xlab = "Year", ylab = "Weekly Growth Rate")
data("sp500w")
sp500w_timeseries <- ts(sp500w, frequency = 12, start=c(2008, 1), end=c(2009, 1))
sp500w_timeseries
is.ts(sp500w_timeseries)
plot(sp500w_timeseries, main = "Weekly Growth Rate of the S & P 500 from 2008 to 2020",
xlab = "Year", ylab = "Weekly Growth Rate")
data("sp500w")
sp500w_timeseries <- ts(sp500w, start=c(2008, 1), end=c(2016, 1))
sp500w_timeseries
is.ts(sp500w_timeseries)
plot(sp500w_timeseries, main = "Weekly Growth Rate of the S & P 500 from 2008 to 2020",
xlab = "Year", ylab = "Weekly Growth Rate")
data("sp500w")
sp500w_timeseries <- ts(sp500w, frequency = 12, start=c(2008, 1), end=c(2016, 1))
sp500w_timeseries
is.ts(sp500w_timeseries)
plot(sp500w_timeseries, main = "Weekly Growth Rate of the S & P 500 from 2008 to 2020",
xlab = "Year", ylab = "Weekly Growth Rate")
data("Taylor")
data("taylor")
data("star")
data("star")
star_timeseries <- ts(star, frequency = 12, start=c(2008, 1), end=c(2016, 1))
star_timeseries
is.ts(star_timeseries)
plot(star_timeseries, main = "Test Scores Due to Class Size",
xlab = "Year", ylab = "Weekly Growth Rate")
data("star")
star_timeseries <- ts(star, frequency = 12, start=c(2000, 1), end=c(2016, 1))
star_timeseries
is.ts(star_timeseries)
plot(star_timeseries, main = "Test Scores Due to Class Size",
xlab = "Year", ylab = "Weekly Growth Rate")
data("star")
star_timeseries <- ts(star, frequency = 12, start=c(1980, 1), end=c(2016, 1))
star_timeseries
is.ts(star_timeseries)
plot(star_timeseries, main = "Test Scores Due to Class Size",
xlab = "Year", ylab = "Weekly Growth Rate")
head(star)
install.packages('pacman', repos = 'https://cran.rstudio.com')
styler:::style_active_file()
knitr::opts_chunk$set(echo = TRUE)
library(TSstudio)
library(ggplot2)
library(fpp)
library(astsa)
library(forecast)
library(xts)
library(dplyr)
library(styler)
library("stringr")
library(reshape)
library(tidyverse)
library(eeptools)
library(ggstatsplot)
library(chron)
library(hms)
library(fGarch)
library(lubridate)
# BEST MODEL with the smallest AIC of -1.124
garch_fit=garchFit(~arma(2,0)+garch(2,0), hr_ts) # giving an error because this is non-stationary data
knitr::opts_chunk$set(echo = TRUE)
library(TSstudio)
library(ggplot2)
library(fpp)
library(astsa)
library(forecast)
library(xts)
library(dplyr)
library(styler)
library("stringr")
library(reshape)
library(tidyverse)
library(eeptools)
library(ggstatsplot)
library(chron)
library(hms)
library(fGarch)
library(lubridate)
wd <- getwd()
setwd(wd)
file <- read.csv('ACTIVITY/DATA/user_1/Actigraph.csv')
file <- file %>%
mutate(date =
case_when(day == 1 ~ paste('2022-03-27', time, sep = ' '),
day == 2 ~ paste('2022-03-28', time, sep = ' ')))
hr_df <- subset(file, select = c('HR', 'date'))
hr_df$date <- ymd_hms(hr_df$date)
row.names(hr_df) <- hr_df$date
hr_df %>%
ggplot()+
ggtitle("Time Series Data for Healthy 29-Year Old Male Performing Daily Routine",
subtitle = 'March 27th, 2022 - March 28th, 2022') +
geom_line(aes(y=HR,x=date),color="#F67280")
wd <- getwd()
setwd(wd)
file <- read.csv('ACTIVITY/DATA/user_1/Actigraph.csv')
file <- file %>%
mutate(date =
case_when(day == 1 ~ paste('2022-03-27', time, sep = ' '),
day == 2 ~ paste('2022-03-28', time, sep = ' ')))
hr_df <- subset(file, select = c('HR', 'date'))
hr_df$date <- ymd_hms(hr_df$date)
row.names(hr_df) <- hr_df$date
hr_df %>%
ggplot()+
ggtitle("Time Series Data for Healthy 29-Year Old Male Performing Daily Routine",
subtitle = 'March 27th, 2022 - March 28th, 2022') +
geom_line(aes(y=HR,x=date),color="#F67280")
# tough to work with
hr_ts <- ts(hr_df$HR, start=decimal_date(as.Date("2022-03-27 10:10:22")), frequency = 3.154e+7)
ggAcf(hr_ts, 20)
ggPacf(hr_ts, 20)
# HERE WE WILL BE PRINTING THE PACF AND ACF TO SEE IF WE NEED TO TAKE MORE DIFFERENCES
# hr_ts_diff <- ts(diff(hr_df$HR), start=decimal_date(as.Date("2022-03-27 10:10:22")), frequency = 3.154e+7)
# ggAcf(hr_ts_diff, 20) # q is 3
# ggPacf(hr_ts_diff, 20) # p would be 5
hr_ts_diff_2 <- ts(diff(diff(hr_df$HR)), start=decimal_date(as.Date("2022-03-27 10:10:22")), frequency = 3.154e+7) # d is 2
ggAcf(hr_ts_diff_2, 20) # q is 1
ggPacf(hr_ts_diff_2, 20) # p is 1 (or 2 or 3 or 4, test all)
# not seasonal data, but have to fit an MA model
# BEST MODEL with the smallest AIC of -1.124
garch_fit=garchFit(~arma(2,0)+garch(2,0), hr_ts) # giving an error because this is non-stationary data
summary(garch_fit)
# EXAMINE RESIDUALS... unsure of what they mean
residuals <- arima(hr_ts, order=c(1, 2, 1)) # fit an AR(1)
summary(residuals)
#
# res <- ar1$res # obtaining the residuals, which you use in the ARCH
# acf2(res^2, 24) # create both an acf and pacf plot using the square of the residuals
# garch_fit=garchFit(~arma(3,0)+garch(3,0), hr_ts) # giving an error because this is non-stationary data
# summary(garch_fit)
#
# garch_fit=garchFit(~arma(4,0)+garch(4,0), hr_ts) # giving an error because this is non-stationary data
# summary(garch_fit)
knitr::opts_chunk$set(echo = TRUE)
library(TSstudio)
library(ggplot2)
library(fpp)
library(astsa)
library(forecast)
library(xts)
library(dplyr)
library(styler)
library("stringr")
library(reshape)
library(tidyverse)
library(eeptools)
library(ggstatsplot)
library(chron)
library(hms)
library(lubridate)
wd <- getwd()
setwd(wd)
file <- read.csv('ACTIVITY/DATA/user_1/Actigraph.csv')
file <- file %>%
mutate(date =
case_when(day == 1 ~ paste('2022-03-27', time, sep = ' '),
day == 2 ~ paste('2022-03-28', time, sep = ' ')))
hr_df <- subset(file, select = c('HR', 'date'))
hr_df$date <- ymd_hms(hr_df$date)
row.names(hr_df) <- hr_df$date
hr_plot <- hr_df %>%
ggplot()+
ggtitle("Time Series Data for Healthy 29-Year Old Male Performing Daily Routine",
subtitle = 'March 27th, 2022 - March 28th, 2022') +
geom_line(aes(y=HR,x=date),color="#6C5B7B")
# tough to work with
hr_ts <- ts(hr_df$HR, start=decimal_date(as.Date("2022-03-27 10:10:22")), frequency = 3.154e+7)
trend <-  ma(hr_ts, order = 3600, centre = T) # ma stands for moving average with frame of 2
plot(trend,
main = 'Heart Rate for Healthy Male (MA Order = 3600)',
type = 'l',
xlab = 'Time',
ylab = 'Heart Rate (BPM)',
col = '#6C5B7B')
# HERE WE WILL BE PRINTING THE PACF AND ACF TO SEE IF WE NEED TO TAKE MORE DIFFERENCES
# d is 1
hr_ts_diff_2 <- ts(diff(diff(hr_df$HR)), start=decimal_date(as.Date("2022-03-27 10:10:22")), frequency = 3.154e+7) # d is 2
ggAcf(hr_ts_diff_2, 20) # q is 1
ggPacf(hr_ts_diff_2, 20) # p is 1 (or 2 or 3 or 4, test all)
# not seasonal data, but have to fit an MA model
sarima_model <- sarima(hr_ts, 1,2,1) #much better
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
wt = read.csv("climate.csv", header = TRUE)
head(wt)
tobb= wt[1095:1344,c(3,11)]
head(tobb)
tobb$DATE<-as.Date(tobb$DATE,"%Y-%m-%d")
ggplot(tobb, aes(x=DATE, y=TOBS)) +
geom_line(colour="blue") +
ggtitle("Temperature at the time of observation from 2021-01-01 to 2021-09-30 in Washington DC")
tobb$DATE[1]
tobb$DATE[length(tobb$DATE)]
temp.ts = ts(tobb$TOBS, start=decimal_date(as.Date("2021-01-01")), frequency = 365.25)
#autoplot(log(temp.ts)) #doesn't make a difference in variation; make it worse
gglagplot(temp.ts,do.lines = FALSE)
#plot(decompose(temp.ts)) #doesn't work
acf(diff(temp.ts))
ggAcf(diff(temp.ts)) #1,3
pacf(diff(temp.ts))
ggPacf(diff(temp.ts)) #1,3,4
acf(diff(temp.ts))
ggAcf(diff(temp.ts)) #1,3
pacf(diff(temp.ts))
ggPacf(diff(temp.ts)) #1,3,4
ARIMA.c=function(p1,p2,q1,q2,data){
temp=c()
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*20),nrow=20)
for (p in p1:p2)#
{
for(q in q1:q2)#
{
for(d in 1:2)#
{
if(p+d+q<=6)
{
model<- Arima(data,order=c(p,d,q),include.drift=TRUE) #including drift because of the obvious trend
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
}
output <- ARIMA.c(1,3,1,3,data=temp.ts)
output
output[which.min(output$AIC),] #2,1,2
output[which.min(output$BIC),] #1,2,2
#If less than 8 -> #3,2,2 Some parameters are not significant
ARIMA.c=function(p1,p2,q1,q2,data){
temp=c()
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*20),nrow=20)
for (p in p1:p2)#
{
for(q in q1:q2)#
{
for(d in 1:2)#
{
if(p+d+q<=6)
{
model<- Arima(data,order=c(p,d,q),include.drift=TRUE) #including drift because of the obvious trend
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
}
output <- ARIMA.c(1,3,1,3,data=temp.ts)
output
output[which.min(output$AIC),] #2,1,2
output[which.min(output$BIC),] #1,2,2
ARIMA.c=function(p1,p2,q1,q2,data){
temp=c()
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*20),nrow=20)
for (p in p1:p2)#
{
for(q in q1:q2)#
{
for(d in 1:2)#
{
if(p+d+q<=6)
{
model<- Arima(data,order=c(p,d,q),include.drift=TRUE) #including drift because of the obvious trend
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
}
output <- ARIMA.c(1,3,1,3,data=hr_ts)
output
ARIMA.c=function(p1,p2,q1,q2,data){
temp=c()
d=1
i=1
temp= data.frame()
ls=matrix(rep(NA,6*20),nrow=20)
for (p in p1:p2)#
{
for(q in q1:q2)#
{
for(d in 1:2)#
{
if(p+d+q<=6)
{
model<- Arima(data,order=c(p,d,q),include.drift=TRUE) #including drift because of the obvious trend
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
}
output <- ARIMA.c(1,1,1,4,data=hr_ts)
output
output[which.min(output$AIC),]
output[which.min(output$BIC),]
sarima_model <- sarima(hr_ts, 1,2,1)
summary(sarima_model)
new_sarima_model <- sarima(hr_ts, 1,1,4)
summary(new_sarima_model)
new_sarima_model
summary(new_sarima_model) # new parameters simply reduced the significance of the ACF of residuals towards the beginning
summary(new_sarima_model)
ARIMA.c=function(p1,p2,q1,q2,data){
temp=c()
d=3
i=1
temp= data.frame()
ls=matrix(rep(NA,6*20),nrow=20)
for (p in p1:p2)#
{
for(q in q1:q2)#
{
for(d in 1:2)#
{
if(p+d+q<=10)
{
model<- Arima(data,order=c(p,d,q),include.drift=TRUE) #including drift because of the obvious trend
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
print(i)
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
}
output <- ARIMA.c(1,3,1,4,data=hr_ts)
knitr::opts_chunk$set(echo = TRUE)
library(TSstudio)
library(ggplot2)
library(fpp)
library(astsa)
library(forecast)
library(xts)
library(dplyr)
library(styler)
library("stringr")
library(reshape)
library(tidyverse)
library(eeptools)
library(ggstatsplot)
library(chron)
library(hms)
library(lubridate)
wd <- getwd()
setwd(wd)
file <- read.csv('ACTIVITY/DATA/user_1/Actigraph.csv')
file <- file %>%
mutate(date =
case_when(day == 1 ~ paste('2022-03-27', time, sep = ' '),
day == 2 ~ paste('2022-03-28', time, sep = ' ')))
hr_df <- subset(file, select = c('HR', 'date'))
hr_df$date <- ymd_hms(hr_df$date)
row.names(hr_df) <- hr_df$date
hr_plot <- hr_df %>%
ggplot()+
ggtitle("Time Series Data for Healthy 29-Year Old Male Performing Daily Routine",
subtitle = 'March 27th, 2022 - March 28th, 2022') +
geom_line(aes(y=HR,x=date),color="#6C5B7B")
# tough to work with
hr_ts <- ts(hr_df$HR, start=decimal_date(as.Date("2022-03-27 10:10:22")), frequency = 3.154e+7)
trend <-  ma(hr_ts, order = 3600, centre = T) # ma stands for moving average with frame of 2
plot(trend,
main = 'Heart Rate for Healthy Male (MA Order = 3600)',
type = 'l',
xlab = 'Time',
ylab = 'Heart Rate (BPM)',
col = '#6C5B7B')
# HERE WE WILL BE PRINTING THE PACF AND ACF TO SEE IF WE NEED TO TAKE MORE DIFFERENCES
# d is 1
hr_ts_diff_2 <- ts(diff(diff(hr_df$HR)), start=decimal_date(as.Date("2022-03-27 10:10:22")), frequency = 3.154e+7) # d is 2
ggAcf(hr_ts_diff_2, 20) # q is 1
ggPacf(hr_ts_diff_2, 20) # p is 1 (or 2 or 3 or 4, test all)
# not seasonal data, but have to fit an MA model
sarima_model <- sarima(hr_ts, 1,2,1)
summary(sarima_model)
new_sarima_model <- sarima(hr_ts, 1,1,4)
summary(new_sarima_model) # new parameters simply reduced the significance of the ACF of residuals towards the beginning
pred=forecast(new_sarima_model,50)
fit<-sarima(hr_ts,order=c(1,1,4),include.drift=TRUE)
fit<-arima(hr_ts,order=c(1,1,4),include.drift=TRUE)
fit<-Arima(hr_ts,order=c(1,1,4),include.drift=TRUE)
prediction <- forecast(fit,50)
accuracy(prediction)
plot(prediction)
prediction <- forecast(fit,100)
accuracy(prediction)
plot(prediction)
plot(prediction)
prediction <- forecast(fit,1000)
accuracy(prediction)
plot(prediction)
fit<-Arima(hr_ts,order=c(1,1,4),include.drift=TRUE)
prediction <- forecast(fit,1000)
accuracy(prediction)
plot(prediction)
length(hr_ts) #250
67936*0.2
67936-13587.2
length(hr_ts) #250
#(20% is 50 observations)
#auto.arima(train) still gives 2,1,2
train=ts(hr_ts[1:54348])
str(train)
test=ts(hr_ts[54349:67936])
auto.arima(train) #still gives 2,1,2
fit2<-Arima(train,order=c(2,1,2),include.drift=TRUE)
summary(fit2)
pred2=forecast(fit2,50)
plot(pred2)
length(hr_ts) # length is 67936
train=ts(hr_ts[1:54348])
str(train)
test=ts(hr_ts[54349:67936])
auto.arima(train) # gives 5, 1, 5
fit2<-Arima(train,order=c(5,1,5),include.drift=TRUE)
summary(fit2)
pred2=forecast(fit2,1000)
plot(pred2)
farima1 <- function(x, h){forecast(Arima(x, order=c(2,1,2)), h=h)}
# Compute cross-validated errors for up to 8 steps ahead
e <- tsCV(hr_ts, forecastfunction = farima1, h = 1)
length(e)
farima1 <- function(x, h){forecast(Arima(x, order=c(2,1,2)), h=h)}
# Compute cross-validated errors for up to 8 steps ahead
e <- tsCV(hr_ts, forecastfunction = farima1, h = 1)
sarima_model <- sarima(hr_ts, 1,2,1)
summary(sarima_model)
new_sarima_model <- sarima(hr_ts, 1,1,4)
summary(new_sarima_model) # new parameters simply reduced the significance of the ACF of residuals towards the beginning
new_sarima_model
fit<-Arima(hr_ts,order=c(1,1,4),include.drift=TRUE)
prediction <- forecast(fit,1000)
accuracy(prediction)
plot(prediction)
plot(prediction)
length(hr_ts) # length is 67936
train=ts(hr_ts[1:54348])
str(train)
test=ts(hr_ts[54349:67936])
auto.arima(train) # gives 5, 1, 5
fit2<-Arima(train,order=c(5,1,5),include.drift=TRUE)
summary(fit2)
pred2=forecast(fit2,1000)
plot(pred2)
plot(pred2)
f1 <- meanf(train, h=10)
accuracy(f1)
checkresiduals(f1)
checkresiduals(f1)
summar(fit)
summary(fit)
setwd("~/Desktop/SPRING_2022/DATA_VIZ/project-spring-2022-project-group-12")

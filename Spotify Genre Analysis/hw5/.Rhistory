##drawing line of best fit
geom_smooth(method='lm',se=F)+
ggtitle('Win% of Interconference Playoff vs. Nonplayoff Teams')+
xlab('Season')+
ylab('Win%')+
scale_color_manual(values=c('orange','blue', 'green','black'))+
theme(plot.title=element_text(vjust=1,size=12,hjust=.5),axis.title.x = element_text(size=10),
axis.title.y = element_text(size=10),panel.background = element_blank(),panel.grid.major.y=element_line(colour='grey'))
##Need to create a dataframe with columns for year, team, and average point margin
##Must loop through each year, and each matchup taking the matchup's avg point margin
##and appending it to a list of their opponents avg point margin
##For each team this list will be summed and divided by games played to yield avg point
##margin
library(dplyr)##For filtering
years<-c()##Empty list to store years for each team
team_names<-c()##empty list to store team names
avg_opponent_point_diff<-c()##empty list storing avg point diff
##Loop through eahc year
for (i in year){
##and each row
for (a in 1:nrow(team_v_team)){
##If the season is correct...
if (team_v_team[a,'season']==i){
##Add the year to the list
years<-c(years,i)
##Add team name to the list
team_names<-c(team_names,team_v_team[[a,'bb_ref_team_name']])
##Assignning 0 veriable store games played
games_played<-0
##Assigning 0 variable to store point differentials
point_diffs<-0
##Looping through each matchup (starting at 3 to skip season and team name columns)
for (b in 3:length(team_v_team)){
##Storing matchup team abbreviation
opponent<-names(team_v_team)[b]
##filtering standings data to find a match
match_success<-filter(standings,season==i & team_short==opponent)
avg_point_diff<-as.numeric(match_success$points_scored_per_game)-as.numeric(match_success$points_allowed_per_game)
##Ensuring record value isnt NA
if(!is.na(team_v_team[a,b])){
##Storing record
record<-str_split_fixed(team_v_team[a,b],'-',2)
##Computing games played against that team
games_added<-as.numeric(record[1])+as.numeric(record[2])
##Adding to total
games_played<-games_played+games_added
##Adding opponent's (point diff*games played against that team) to total
point_diffs<-point_diffs+(avg_point_diff*games_added)
}
}
##Last part of the loop for each team
##Must add average point differential to opponents to master list
##Calculate avg opponent point diff
calculation<-point_diffs/games_played
avg_opponent_point_diff<-c(avg_opponent_point_diff,calculation)
}
}
}
##Create the dataframe
point_marginDF<-cbind.data.frame(years,team_names,avg_opponent_point_diff)
##Must add conference nd team's point margin to the point margins dataset
for (i in 1:nrow(point_marginDF)){
##storing team and years variables
team<-point_marginDF[i,'team_names']
year1<-point_marginDF[i,'years']
##Using filter to find matches
match_success<-filter(standings,bb_ref_team_name==team & season==year1)
##calculating point differential
point_marginDF[i,'own_point_margin']<-match_success$points_scored_per_game-match_success$points_allowed_per_game
##If name is in western conference assign value
if(team %in% West){
point_marginDF[i,'conference']<-'West'
}
else{##If in east assign value
point_marginDF[i,'conference']<-'East'
}
}
##Getting x and y coordinates for chosen labels: DAL 2011, LAL 2019, CHI 2019
DALx<-filter(point_marginDF,years==2011 & team_names=='Dallas Mavericks')$own_point_margin
DALy<-filter(point_marginDF,years==2011 & team_names=='Dallas Mavericks')$avg_opponent_point_diff
LALx<-filter(point_marginDF,years==2019 & team_names=='Los Angeles Lakers')$own_point_margin
LALy<-filter(point_marginDF,years==2019 & team_names=='Los Angeles Lakers')$avg_opponent_point_diff
CHIx<-filter(point_marginDF,years==2019 & team_names=='Chicago Bulls')$own_point_margin
CHIy<-filter(point_marginDF,years==2019 & team_names=='Chicago Bulls')$avg_opponent_point_diff
##Creating plot
ggplot(point_marginDF,aes(x=own_point_margin,y=avg_opponent_point_diff,color=conference))+
##making scatter plot
geom_point(aes(color=conference))+
ggtitle("Team's Point Margin vs. Average Opponent Point Margin")+
xlab('Team Point Margin')+
ylab('Average Opponent Point Margin')+
##adjusting axis and plot titles sizing
theme(plot.title=element_text(vjust=1,size=14,hjust=.5),axis.title.x = element_text(size=11),
axis.title.y = element_text(size=11),panel.background = element_blank(),panel.grid.major.y=element_line(colour='grey'),legend.position='bottom')+
##changing colors
scale_color_manual(values=c('darkblue', 'red'))+
##Plotting line of best fit
geom_smooth(method='lm',se=F,size=1.2)+
##Assigning labels to the specific points
annotate("text", x = DALx, y = DALy, label = "DAL 2011",size=3,vjust=-.5,hjust=0) +
annotate("text", x = LALx, y = LALy, label = "LAL 2019",size=3,vjust=-.5,hjust=0)+
annotate("text", x = CHIx, y = CHIy, label = "CHI 2019",size=3,vjust=-.5,hjust=0)
##Creating a binary column where values are 1 for teams that did make the playoffs
playoffs_numeric<-ifelse(standings$playoffs=='Yes',1,0)
##Assigning vector to the standings dataframe
standings$playoffs1<-playoffs_numeric
##Running logistic regression
model<-glm(playoffs1~win_pct,family=binomial(link='logit'),data=standings)
##Printing model
summary(model)
win_rate<-.5
##To move from log odds to actual probability we must compute e^(the regression)/(1+e^(the regression))
playoff_probability<-(exp(model$coefficients[[1]]+win_rate*model$coefficients[[2]]))/(1+exp(model$coefficients[[1]]+win_rate*model$coefficients[[2]]))
##Pasting result
paste0(round(playoff_probability*100,1),'%')
##Adding indicator with value 1 for western conference teams
is_west<-ifelse(standings$conference=='West',0,1)
##Assigning to dataset
standings$is_west<-is_west
##Running logistic regression
model_iswest<-glm(playoffs1~win_pct+is_west,family=binomial(link='logit'),data=standings)
##Exploring model
summary(model_iswest)
##Reporting is_west coefficient
paste('The coefficient for is_west is',round(model_iswest$coefficients[[3]],3))
##Calculating east probability (thus not including is_west regressor as the value=0)
east_probability<-(exp(model_iswest$coefficients[[1]]+win_rate*model_iswest$coefficients[[2]]))/(1+exp(model_iswest$coefficients[[1]]+win_rate*model_iswest$coefficients[[2]]))
##Calculating west probability
west_probability<-(exp(model_iswest$coefficients[[1]]+win_rate*model_iswest$coefficients[[2]]+model_iswest$coefficients[[3]]))/(1+exp(model_iswest$coefficients[[1]]+win_rate*model_iswest$coefficients[[2]]+model_iswest$coefficients[[3]]))
##Reporting probabilities of making the playoffs
paste0('EAST: ',round(east_probability*100,1),'%')
paste0('WEST: ',round(west_probability*100,1),'%')
library(tidyverse)
standings <- read_csv("combined_standings.csv")
team_v_team <- read_csv("combined_team_vs_team_records.csv")
##Before any data is manipulated, must ensure the data is clean
##Visual inspection seems to indicate everything is clean but always need to
##make sure
##Check for missing values
sapply(standings,function(x) sum(is.na(x)))
sapply(team_v_team,function(x) sum(is.na(x)))
##Check for unique values
sapply(standings, function(x) length(unique(x)))
sapply(team_v_team, function(x) length(unique(x)))
##Check summaries
sapply(standings, function(x) summary(x))
sapply(team_v_team, function(x) summary(x))
##Check data types
str(standings)
str(team_v_team)
##Everything looks good so now we can move on
##Team conferences are stored in the standings dataset
##To find win % of west vs. east teams, west teams must be identified.
##Once conferences are identified, then all west vs east matchups are located
##and wins and losses are stored allowing for a win % calculation
##Importing stringr
library(stringr)
Wins=0 ##Stores total wins
Losses=0##stores total losses
West=c()##stores all west team names and abbreviations
East=c()##stores all east team names and abbreviations
for (i in 1:nrow(standings)){
##Collecting team and conference name for all rows
team<-standings[i,'bb_ref_team_name']
conference<-standings[i,'conference']
if (conference=='West'){##If west
West<-c(West,team,standings[i,'team_short'])##add name and abbreviation
}
else{
East<-c(East,team,standings[i,'team_short'])
}
}
##Keeping only unique values of names and abbreviations
West=unique(West)
East=unique(East)
for (i in 1:nrow(team_v_team)){
##If a team is in the west...
if(team_v_team[i,'bb_ref_team_name'] %in% West){
for (a in 1:length(team_v_team)){
##If the column name is an eastern conference team..
if (names(team_v_team)[a] %in% East){
##Removing all NA values to be safe
if(!is.na(team_v_team[i,a])){
##Storing the record as a split string
record<-str_split_fixed(team_v_team[i,a],'-',n=2)
##Adding wins and losses to approriate variables
Wins<-Wins+as.numeric(record[1])
Losses<-Losses+as.numeric(record[2])
}
}
}
}
}
##Calculating win% (wins/wins+losses)
(win_percentage<-paste0(as.character(round((Wins/(Wins+Losses))*100,1)),'%'))
##Largely follows same process from above with minor tweaks
##Each season must be looped through with total west vs east wins and losses
##calculated. A dataframe is created storing the information for each year
##as well as performing a win-loss calulation to see if the west>east for that year
West_Over_East=0 #stores west>east seasons (+1 indicates west>east that year)
year=c()##Stores year info
Win_games=c() ##Stores number of wins
Loss_games=c() ##Stores number of losses
##Looping through each year
for (a in unique(team_v_team$season)){
##Store the year
year=c(year,a)
##Initialize win and loss values
Wins2=0
Losses2=0
##Looking for west vs east matchups and storing wins and losses just like Q2
for (i in 1:nrow(team_v_team)){
if((team_v_team[i,'bb_ref_team_name'] %in% West) && (team_v_team[i,'season']==a)){
for (b in 1:length(team_v_team)){
if (names(team_v_team)[b] %in% East){
if(!is.na(team_v_team[i,b])){
record<-str_split_fixed(team_v_team[i,b],'-',n=2)
Wins2<-Wins2+as.numeric(record[1])
Losses2<-Losses2+as.numeric(record[2])
}
}
}
}
}
##Appending lists with number of wins and losses
Win_games<-c(Win_games,Wins2)
Loss_games<-c(Loss_games,Losses2)
if (Wins2>Losses2){
##If west has more wins than losses against east add 1
West_Over_East<-West_Over_East+1
}
}
##Printing answer to console
paste(West_Over_East,'out of 16 years.')
##Create data frame with year, win and loss totals
Seasons_Win_Differential<-data.frame(year,Win_games,Loss_games)
library(tidyverse)
standings <- read_csv("combined_standings.csv")
team_v_team <- read_csv("combined_team_vs_team_records.csv")
##Before any data is manipulated, must ensure the data is clean
##Visual inspection seems to indicate everything is clean but always need to
##make sure
##Check for missing values
sapply(standings,function(x) sum(is.na(x)))
sapply(team_v_team,function(x) sum(is.na(x)))
##Check for unique values
sapply(standings, function(x) length(unique(x)))
sapply(team_v_team, function(x) length(unique(x)))
##Check summaries
sapply(standings, function(x) summary(x))
sapply(team_v_team, function(x) summary(x))
##Check data types
str(standings)
str(team_v_team)
##Everything looks good so now we can move on
##Team conferences are stored in the standings dataset
##To find win % of west vs. east teams, west teams must be identified.
##Once conferences are identified, then all west vs east matchups are located
##and wins and losses are stored allowing for a win % calculation
##Importing stringr
library(stringr)
Wins=0 ##Stores total wins
Losses=0##stores total losses
West=c()##stores all west team names and abbreviations
East=c()##stores all east team names and abbreviations
for (i in 1:nrow(standings)){
##Collecting team and conference name for all rows
team<-standings[i,'bb_ref_team_name']
conference<-standings[i,'conference']
if (conference=='West'){##If west
West<-c(West,team,standings[i,'team_short'])##add name and abbreviation
}
else{
East<-c(East,team,standings[i,'team_short'])
}
}
##Keeping only unique values of names and abbreviations
West=unique(West)
East=unique(East)
for (i in 1:nrow(team_v_team)){
##If a team is in the west...
if(team_v_team[i,'bb_ref_team_name'] %in% West){
for (a in 1:length(team_v_team)){
##If the column name is an eastern conference team..
if (names(team_v_team)[a] %in% East){
##Removing all NA values to be safe
if(!is.na(team_v_team[i,a])){
##Storing the record as a split string
record<-str_split_fixed(team_v_team[i,a],'-',n=2)
##Adding wins and losses to approriate variables
Wins<-Wins+as.numeric(record[1])
Losses<-Losses+as.numeric(record[2])
}
}
}
}
}
##Calculating win% (wins/wins+losses)
(win_percentage<-paste0(as.character(round((Wins/(Wins+Losses))*100,1)),'%'))
##Largely follows same process from above with minor tweaks
##Each season must be looped through with total west vs east wins and losses
##calculated. A dataframe is created storing the information for each year
##as well as performing a win-loss calulation to see if the west>east for that year
West_Over_East=0 #stores west>east seasons (+1 indicates west>east that year)
year=c()##Stores year info
Win_games=c() ##Stores number of wins
Loss_games=c() ##Stores number of losses
##Looping through each year
for (a in unique(team_v_team$season)){
##Store the year
year=c(year,a)
##Initialize win and loss values
Wins2=0
Losses2=0
##Looking for west vs east matchups and storing wins and losses just like Q2
for (i in 1:nrow(team_v_team)){
if((team_v_team[i,'bb_ref_team_name'] %in% West) && (team_v_team[i,'season']==a)){
for (b in 1:length(team_v_team)){
if (names(team_v_team)[b] %in% East){
if(!is.na(team_v_team[i,b])){
record<-str_split_fixed(team_v_team[i,b],'-',n=2)
Wins2<-Wins2+as.numeric(record[1])
Losses2<-Losses2+as.numeric(record[2])
}
}
}
}
}
##Appending lists with number of wins and losses
Win_games<-c(Win_games,Wins2)
Loss_games<-c(Loss_games,Losses2)
if (Wins2>Losses2){
##If west has more wins than losses against east add 1
West_Over_East<-West_Over_East+1
}
}
##Printing answer to console
paste(West_Over_East,'out of 16 years.')
##Create data frame with year, win and loss totals
Seasons_Win_Differential<-data.frame(year,Win_games,Loss_games)
##Claculating win - loss column for each season
Seasons_Win_Differential$diff<-Seasons_Win_Differential$Win_games-Seasons_Win_Differential$Loss_games
##Calculating max difference
biggest_diff<-max(Seasons_Win_Differential$diff)
##Locating max difference
index<-which(Seasons_Win_Differential$diff==biggest_diff,arr.ind=T)
##Print it to console
(Seasons_Win_Differential[index,])
##First playoff teams must be isolated for a given year. Then a minimum win%
##will be calculated for each conference and these percentages will be stored.
##Then an average will be taken
min_win_percentage_playoff_east<-c()##Stores min win% from east for each year
min_win_percentage_playoff_west<-c()##Stores min win% from west for each year
for (i in year){##lopping through year
win_percentage_playoff_east<-c() ##stores all east playoff win%
win_percentage_playoff_west<-c() ##stores all west playoff win%
for (a in 1:nrow(standings)){
##if the year is right and the team is in the playoffs...
if ((standings[a,'season']==year) && (standings[a,'playoffs']=='Yes')){
##if western conference...
if (standings[a,'conference']=='West'){
##adding win% to west list
win_percentage_playoff_west<-c(win_percentage_playoff_west,standings[a,'win_pct'])
}
else{ ##adding to east list
win_percentage_playoff_east<-c(win_percentage_playoff_east,standings[a,'win_pct'])
}
}
}
##Adding minimum win% to appropriate list
min_win_percentage_playoff_west<-c(min_win_percentage_playoff_west,min(as.numeric(win_percentage_playoff_west)))
min_win_percentage_playoff_east<-c(min_win_percentage_playoff_east,min(as.numeric(win_percentage_playoff_east)))
}
##Pasting mean min win% for each conference to console
paste0('WEST: ',round(mean(min_win_percentage_playoff_west)*100,2),'%')
paste0('EAST: ',round(mean(min_win_percentage_playoff_east)*100,2),'%')
##All combinations of playoff and non-playoff teams from the opposite conference must
##be collected. The combinations for each season are:
##west playoff vs east playoff
##west playoff vs. east non playoff
##west non playoff vs east playoff
##west non playoff vs east non playoff
##A dataframe will be created with columns for year, win% and matchup type
##To do this each year there will be a collection of all playoff and non playoff teams
##and then the appropriate matchups will be identified and the wins and losses will be stored
##at the end of each season loop, 4 win% values (one for each combo) will be calculated
##Lists will store the win% each year for the appropriate matchups
playoff_west_playoff_east<-c()
playoff_west_nonplayoff_east<-c()
nonplayoff_west_playoff_east<-c()
nonplayoff_west_nonplayoff_east<-c()
##Looping through each year
for (i in year){
##Lists that will hold the relevant team names for a given season
playoff_west<-c()
nonplayoff_west<-c()
playoff_east<-c()
nonplayoff_east<-c()
##Numeric variables to hold wins and losses for appropriate matchups
wins_wplayoff_eplayoff<-0
loss_wplayoff_eplayoff<-0
wins_wplayoff_enonplayoff<-0
loss_wplayoff_enonplayoff<-0
wins_wnonplayoff_eplayoff<-0
loss_wnonplayoff_eplayoff<-0
wins_wnonplayoff_enonplayoff<-0
loss_wnonplayoff_enonplayoff<-0
##Looping through the standings data
for (a in 1:nrow(standings)){
##If the season value is correct...
if (standings[a,'season']==i){
##If a west playoff team...
if(standings[a,'playoffs']=='Yes' & standings[a,'conference']=='West'){
##Add the names to the list
playoff_west<-c(playoff_west,standings[a,'bb_ref_team_name'],standings[a,'team_short'])
}
##If a west nonplayoff team...
else if (standings[a,'playoffs']=='No' & standings[a,'conference']=='West'){
##Add to list
nonplayoff_west<-c(nonplayoff_west,standings[a,'bb_ref_team_name'],standings[a,'team_short'])
}
##If East playoff team...
else if (standings[a,'playoffs']=='Yes' & standings[a,'conference']=='East'){
##Add to list
playoff_east<-c(playoff_east,standings[a,'bb_ref_team_name'],standings[a,'team_short'])
}
##If east nonplayoff team
else if (standings[a,'playoffs']=='No' & standings[a,'conference']=='East'){
##Add to list
nonplayoff_east<-c(nonplayoff_east,standings[a,'bb_ref_team_name'],standings[a,'team_short'])
}
}
}
##Next for loop goes through team matchup data
for (b in 1:nrow(team_v_team)){
##Ensuring right season
if (team_v_team[b,'season']==i){
##If the team is a western conference playoff team...
if(team_v_team[b,'bb_ref_team_name'] %in% playoff_west){
##loop through matchups
for (c in 1:length(team_v_team)){
##If matchup is a east playoff team
if(names(team_v_team)[c] %in% playoff_east){
if(!is.na(team_v_team[b,c])){
##Add wins and losses appropriately
record<-str_split_fixed(team_v_team[b,c],'-',n=2)
wins_wplayoff_eplayoff<-wins_wplayoff_eplayoff+as.numeric(record[1])
loss_wplayoff_eplayoff<-loss_wplayoff_eplayoff+as.numeric(record[2])
}
}
##If eatern conference non playoff team
else if (names(team_v_team)[c] %in% nonplayoff_east){
if(!is.na(team_v_team[b,c])){
##add wins and losses appropriately
record<-str_split_fixed(team_v_team[b,c],'-',n=2)
wins_wplayoff_enonplayoff<-wins_wplayoff_enonplayoff+as.numeric(record[1])
loss_wplayoff_enonplayoff<-loss_wplayoff_enonplayoff+as.numeric(record[2])
}
}
}
}     ##If team is a west nonplayoff team loop through their matchups
##and add wins and losses just like above
if(team_v_team[b,'bb_ref_team_name'] %in% nonplayoff_west){
for (c in 1:length(team_v_team)){
if(names(team_v_team)[c] %in% playoff_east){
if(!is.na(team_v_team[b,c])){
record<-str_split_fixed(team_v_team[b,c],'-',n=2)
wins_wnonplayoff_eplayoff<-wins_wnonplayoff_eplayoff+as.numeric(record[1])
loss_wnonplayoff_eplayoff<-loss_wnonplayoff_eplayoff+as.numeric(record[2])
}
}
else if (names(team_v_team)[c] %in% nonplayoff_east){
if(!is.na(team_v_team[b,c])){
record<-str_split_fixed(team_v_team[b,c],'-',n=2)
wins_wnonplayoff_enonplayoff<-wins_wnonplayoff_enonplayoff+as.numeric(record[1])
loss_wnonplayoff_enonplayoff<-loss_wnonplayoff_enonplayoff+as.numeric(record[2])
}
}
}
}
}
}
##Establish win percentage for each matchup type for each year and add to list
playoff_west_playoff_east<-c(playoff_west_playoff_east,((wins_wplayoff_eplayoff)/(wins_wplayoff_eplayoff+loss_wplayoff_eplayoff)))
playoff_west_nonplayoff_east<-c(playoff_west_nonplayoff_east,((wins_wplayoff_enonplayoff)/(wins_wplayoff_enonplayoff+loss_wplayoff_enonplayoff)))
nonplayoff_west_playoff_east<-c(nonplayoff_west_playoff_east,((wins_wnonplayoff_eplayoff)/(wins_wnonplayoff_eplayoff+loss_wnonplayoff_eplayoff)))
nonplayoff_west_nonplayoff_east<-c(nonplayoff_west_nonplayoff_east,((wins_wnonplayoff_enonplayoff)/(wins_wnonplayoff_enonplayoff+loss_wnonplayoff_enonplayoff)))
}
View(team_v_team)
install.packages('Git')
install.packages('styler')
?style_file
library(styler)
setwd("C:/Users/jstei/Desktop/Coding")
style_file('ML_Finance.R')
setwd("C:/Users/jstei/Desktop/Coding")
library(ISLR)
install.packages('ISLR')
rm(list=ls())
library(ISLR)
data(Carseats)
load(Carseats)
?Carseats
data(Carseats)
>Carseats
?Carseats
style_file('assignment-d3.R')
setwd("C:/Users/jstei/Desktop/Masters Classes/ANLY_503/hw5-spring-2022-jsteinfink914")
style_file('assignment-d3.R')
library(styler)
style_file('assignment-d3.R')
style_file('assignment-d3.R')
